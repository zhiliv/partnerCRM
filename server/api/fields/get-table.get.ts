import type { H3Event } from 'h3'
import type { FieldsCategory } from '~/types/Category'
import type { QueryArrayResult } from 'pg'
import type {ParamsQuery} from '~/types/ParamsQuery'
import { db } from '~/server/db'

interface Params extends ParamsQuery {
  table: string
}

export default defineEventHandler(async (event: H3Event) => {
  const params: Params = await getQuery(event) // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
  console.log("üöÄ -> defineEventHandler -> params:", params)
  
  const response = {
    statusCode: 200,
    message: '–°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ',
    data: <any>[]
  }
  
  if(!params || !params.table) {
    response.statusCode = 400
    response.message = '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞'
    return response
  }

  const sql = `
    SELECT
      fld.id,
      fld.table,
      fld.values,
      fld.created_date,
      fld.updated_date,
      fld.values -> 'name' as name,
      fld.values -> 'label' as label,
      fld.values -> 'description' as description,
      fld.values -> 'type' as type
    FROM 
      service.fields as fld
      WHERE fld.table = $1
    `

  try {
    const result: QueryArrayResult = await db.query(sql, [params.table]) // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞  
    if(!result) {
      response.statusCode = 400
      response.message = `–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π`
    }

    const rows: FieldsCategory[][] = result.rows
    response.data = rows
  }
  catch(err: any) {
    response.statusCode = 400
    response.message = `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ fields: ${err.toString()}`
  }
  return response
})