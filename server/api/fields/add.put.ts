import type { H3Event } from 'h3'
import type { ResponseHTTP } from '~/types/ResponseHTTP'
import { db } from '~/server/db'
import { QueryResult } from 'pg'

export default defineEventHandler(async (event: H3Event) => {
  const params = await readBody(event) // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
  console.log("üöÄ -> defineEventHandler -> params:", params)
  const response: ResponseHTTP = {
    statusCode: 200,
    message: '–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
    data: null
  }

  if(!params) {
    response.statusCode = 500
    response.message = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è'
    return response
  }
  
  
  const obj = {
    name: params.name,
    label: params.label,
    description: params.description,
    type: params.type
  }

  const sql: string = `INSERT INTO service.fields("table", values) VALUES($1, $2) RETURNING *`
  try{
    const result: QueryResult = await db.query(sql, [params.table, obj])

    if(!result) {
      response.statusCode = 500
      response.message = '–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è'
      return response
    }

    response.statusCode = 200
    response.message = '–ü–æ–ª–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ'
    response.data = result.rows[0]  
  }
  catch(err: any){
    response.statusCode = 400
    response.message = `–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—è: ${err.toString()}`
    return response
  }
  
  
  return response
})