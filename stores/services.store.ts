import { defineStore } from 'pinia'
import { Service } from '~/types/service'
import { Response } from '~/types/Response'

export const useStoreServices = defineStore('services', () => {
  const list = ref<any>([]) // –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
  const count = ref<number | any>(0) // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
  const isLoading = ref<boolean>(true) // –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const limit = ref<number>(50) // –õ–∏–º–∏—Ç –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫
  const offset = ref<number>(0) // –°–¥–≤–∏–≥ –ø–æ–∏—Å–∫–∞

  /** 
  ** –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
  * @function getList
  */
  const getList = async () => {
    isLoading.value = true
    // await getCount()
    const url: string = `/api/services/all` // –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    try {
      const response: Response = await $fetch(url) // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
      if(response.statusCode !== 200) {
        showToast({ message: response.message, type: 'error' })
      }
      list.value = response.data
      isLoading.value = false
    }
    catch(err: any) {
      showToast({ message: err, type: 'error' })
    }
  }

  /** 
  ** –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
  * @function getCount
  */
  const getCount = async () => {
    isLoading.value = true
    // await getCount()
    const url: string = `/api/services/count` // –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
    try {
      const response: Response = await $fetch(url) // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
      if(response.statusCode !== 200) {
        showToast({ message: response.message, type: 'error' })
      }
      count.value = +response.data
      isLoading.value = false
    }
    catch(err: any) {
      showToast({ message: err, type: 'error' })
    }
  }

  /** 
  ** –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
  * @function create
  */
  const create = async (params: Service) => {
    const url: string = `/api/services/add` // –°—Å—ã–ª–∫–∞ 
    try {
      const response: any = await $fetch(url, { method: 'put', body: params}) // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
      if(response.statusCode !== 200) {
        showToast({ message: response.message, type: 'error' })
      }
      count.value = +response.data
      showToast({ message: response.message, type: 'success' })
      return response
    }
    catch(err: any) {
      showToast({ message: err, type: 'error' })
    }    
  }
  
  /** 
  ** –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
  * @function get
  */
  const get = async (params: any) => {
    console.log("üöÄ -> get -> params:", params)
    const id: number = params.srvcs_id
    console.log("üöÄ -> get -> id:", id)
    const url: string = `/api/services/get` // –°—Å—ã–ª–∫–∞
    try{
      const response: Response = await $fetch(url, {  params: { id }})
      if(response.statusCode !== 200) {
        showToast({ message: response.message, type: 'error' })
      }
    }
    catch(err){
      
    }
  }

  return { getList, getCount, count, list, limit, offset, create, isLoading, get }
})